// Code generated by MockGen. DO NOT EDIT.
// Source: orchestrator.go
//
// Generated by this command:
//
//	mockgen -source=orchestrator.go -destination=./mocks/mock_orchestrator.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	orchestrator "dash0.com/otlp-log-processor-backend/internal/orchestrator"
	gomock "go.uber.org/mock/gomock"
)

// MockOrchestrator is a mock of Orchestrator interface.
type MockOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *MockOrchestratorMockRecorder
	isgomock struct{}
}

// MockOrchestratorMockRecorder is the mock recorder for MockOrchestrator.
type MockOrchestratorMockRecorder struct {
	mock *MockOrchestrator
}

// NewMockOrchestrator creates a new mock instance.
func NewMockOrchestrator(ctrl *gomock.Controller) *MockOrchestrator {
	mock := &MockOrchestrator{ctrl: ctrl}
	mock.recorder = &MockOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrchestrator) EXPECT() *MockOrchestratorMockRecorder {
	return m.recorder
}

// AttributeKey mocks base method.
func (m *MockOrchestrator) AttributeKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttributeKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// AttributeKey indicates an expected call of AttributeKey.
func (mr *MockOrchestratorMockRecorder) AttributeKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttributeKey", reflect.TypeOf((*MockOrchestrator)(nil).AttributeKey))
}

// EnqueueBatch mocks base method.
func (m *MockOrchestrator) EnqueueBatch(values []string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueBatch", values)
	ret0, _ := ret[0].(bool)
	return ret0
}

// EnqueueBatch indicates an expected call of EnqueueBatch.
func (mr *MockOrchestratorMockRecorder) EnqueueBatch(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueBatch", reflect.TypeOf((*MockOrchestrator)(nil).EnqueueBatch), values)
}

// IncrMetric mocks base method.
func (m *MockOrchestrator) IncrMetric(ctx context.Context, mt orchestrator.MetricType, n int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrMetric", ctx, mt, n)
}

// IncrMetric indicates an expected call of IncrMetric.
func (mr *MockOrchestratorMockRecorder) IncrMetric(ctx, mt, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrMetric", reflect.TypeOf((*MockOrchestrator)(nil).IncrMetric), ctx, mt, n)
}

// RecordDrop mocks base method.
func (m *MockOrchestrator) RecordDrop(n uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordDrop", n)
}

// RecordDrop indicates an expected call of RecordDrop.
func (mr *MockOrchestratorMockRecorder) RecordDrop(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordDrop", reflect.TypeOf((*MockOrchestrator)(nil).RecordDrop), n)
}
